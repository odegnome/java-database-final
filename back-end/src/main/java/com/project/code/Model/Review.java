package com.project.code.Model;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Document(collection = "reviews")
public class Review {

    @Id
    private String id;

// 1. Add 'customerId' field:
//    - Type: private Long
//    - This field represents the customer who created the review.
//    - This field cannot be empty, use the @NotNull annotation to enforce this rule.
    @NotNull
    private Long customerId;
// 2. Add 'productId' field:
//    - Type: private Long
//    - This field represents the product being reviewed.
//    - This field cannot be empty, use the @NotNull annotation to enforce this rule.
    @NotNull
    private Long productId;
// 3. Add 'storeId' field:
//    - Type: private Long
//    - This field represents the store associated with the product.
//    - This field cannot be empty, use the @NotNull annotation to enforce this rule.
    @NotNull
    private Long storeId;
// 4. Add 'rating' field:
//    - Type: private Integer
//    - This field represents the rating given to the product (out of 5).
//    - This field cannot be empty, use the @NotNull annotation to enforce this rule.
    @NotNull
    private Integer rating;
// 5. Add 'comment' field:
//    - Type: private String
//    - This field represents an optional comment on the product.
    private String comment;
// 6. Add validation:
//    - Apply @NotNull to the customerId, productId, storeId, and rating fields to ensure they are not null.
//    - Example: @NotNull(message = "Customer cannot be null")

// 7. Add @Document annotation:
//    - Use @Document(collection = "reviews") to indicate that this class represents a MongoDB document.

// 8. Add constructor:
//    - The constructor should accept values for customerId, productId, storeId, rating, and an optional comment.

    public Review(Long customerId, Long productId, Long storeId, Integer rating, String comment) {
        this.customerId = customerId;
        this.productId = productId;
        this.storeId = storeId;
        this.rating = rating;
        this.comment = comment;
    }
// 9. Add @Id annotation:
//    - Use @Id to mark the field 'id' as the primary key for MongoDB.
//    - The 'id' field is of type String and will be automatically generated by MongoDB.

// 10. Add Getters and Setters:
//    - Add getter and setter methods for all fields (customerId, productId, storeId, rating, comment).

    public Long getCustomerId() {
        return customerId;
    }
    public Long getProductId() {
        return productId;
    }
    public Long getStoreId() {
        return storeId;
    }
    public Integer getRating() {
        return rating;
    }
    public String getComment() {
        return comment;
    }

    public void setCustomerId(Long customerId) {
        this.customerId = customerId;
    }
    public void setProductId(Long productId) {
        this.productId = productId;
    }
    public void setStoreId(Long storeId) {
        this.storeId = storeId;
    }
    public void setRating(Integer rating) {
        this.rating = rating;
    }
    public void setComment(String comment) {
        this.comment = comment;
    }

}
